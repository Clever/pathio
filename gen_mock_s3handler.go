// Code generated by MockGen. DO NOT EDIT.
// Source: pathio.go

// Package pathio is a generated GoMock package.
package pathio

import (
	s3 "github.com/aws/aws-sdk-go/service/s3"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockS3Handler is a mock of S3Handler interface
type MockS3Handler struct {
	ctrl     *gomock.Controller
	recorder *MockS3HandlerMockRecorder
}

// MockS3HandlerMockRecorder is the mock recorder for MockS3Handler
type MockS3HandlerMockRecorder struct {
	mock *MockS3Handler
}

// NewMockS3Handler creates a new mock instance
func NewMockS3Handler(ctrl *gomock.Controller) *MockS3Handler {
	mock := &MockS3Handler{ctrl: ctrl}
	mock.recorder = &MockS3HandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockS3Handler) EXPECT() *MockS3HandlerMockRecorder {
	return m.recorder
}

// GetBucketLocation mocks base method
func (m *MockS3Handler) GetBucketLocation(input *s3.GetBucketLocationInput) (*s3.GetBucketLocationOutput, error) {
	ret := m.ctrl.Call(m, "GetBucketLocation", input)
	ret0, _ := ret[0].(*s3.GetBucketLocationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketLocation indicates an expected call of GetBucketLocation
func (mr *MockS3HandlerMockRecorder) GetBucketLocation(input interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketLocation", reflect.TypeOf((*MockS3Handler)(nil).GetBucketLocation), input)
}

// GetObject mocks base method
func (m *MockS3Handler) GetObject(input *s3.GetObjectInput) (*s3.GetObjectOutput, error) {
	ret := m.ctrl.Call(m, "GetObject", input)
	ret0, _ := ret[0].(*s3.GetObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject
func (mr *MockS3HandlerMockRecorder) GetObject(input interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockS3Handler)(nil).GetObject), input)
}

// PutObject mocks base method
func (m *MockS3Handler) PutObject(input *s3.PutObjectInput) (*s3.PutObjectOutput, error) {
	ret := m.ctrl.Call(m, "PutObject", input)
	ret0, _ := ret[0].(*s3.PutObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObject indicates an expected call of PutObject
func (mr *MockS3HandlerMockRecorder) PutObject(input interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockS3Handler)(nil).PutObject), input)
}

// ListObjects mocks base method
func (m *MockS3Handler) ListObjects(input *s3.ListObjectsInput) (*s3.ListObjectsOutput, error) {
	ret := m.ctrl.Call(m, "ListObjects", input)
	ret0, _ := ret[0].(*s3.ListObjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjects indicates an expected call of ListObjects
func (mr *MockS3HandlerMockRecorder) ListObjects(input interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjects", reflect.TypeOf((*MockS3Handler)(nil).ListObjects), input)
}

// HeadObject mocks base method
func (m *MockS3Handler) HeadObject(input *s3.HeadObjectInput) (*s3.HeadObjectOutput, error) {
	ret := m.ctrl.Call(m, "HeadObject", input)
	ret0, _ := ret[0].(*s3.HeadObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadObject indicates an expected call of HeadObject
func (mr *MockS3HandlerMockRecorder) HeadObject(input interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadObject", reflect.TypeOf((*MockS3Handler)(nil).HeadObject), input)
}
